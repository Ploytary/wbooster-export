mixin respImage(options, alt = '')
  - const isString = typeof options === 'string';
  - const unit = attributes.unit || 'vw';

  if isString
    img(src=options alt=alt loading="lazy")&attributes(attributes)
  else 
    -
      const {media, srcset} = options;

      const sortedSrcSet = srcset.sort((a, b) => a.wDescriptor - b.wDescriptor);
      const sortedMedia = media.sort((a, b) => b.viewport - a.viewport);

      const srcsetAtt = sortedSrcSet.map((item) => `${item.path} ${item.wDescriptor}w`).join(',');
      const mediaTemp = media.map((query) => {
        const widthOffset = query.widthOffset ? query.widthOffset >= 0 ? `+ ${Math.abs(query.widthOffset)}px` : `- ${Math.abs(query.widthOffset)}px` : '';
        let size = '';
        if (widthOffset && query.imageCount > 1) {
          size = `calc((${100 - 0 * 2}${unit} ${widthOffset}) / ${query.imageCount})`;
        } else if (widthOffset) {
          size = `calc(${100 - 0 * 2}${unit} ${widthOffset})`;
        } else {
          size = `${100 / query.imageCount}${unit}`;
        }

        return `(min-width: ${query.viewport}px) ${size}`;
      });
      mediaTemp.push(`100${unit}`);
      const mediaAtt = mediaTemp.join(', ');
    img.responsive-img(sizes=mediaAtt src=sortedSrcSet[0].path, alt=alt srcset=srcsetAtt loading="lazy")&attributes(attributes)